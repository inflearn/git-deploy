#!/bin/bash

# Welcome screen

echo "                                                                                        ";
echo "     ((((((  ((((((                                                                     ";
echo "   (((       (    (((    ██╗███╗   ██╗███████╗██╗     ███████╗ █████╗ ██████╗ ███╗   ██╗";
echo " (((   ((,  ((      ((,  ██║████╗  ██║██╔════╝██║     ██╔════╝██╔══██╗██╔══██╗████╗  ██║";
echo " ((       (((        ((  ██║██╔██╗ ██║█████╗  ██║     █████╗  ███████║██████╔╝██╔██╗ ██║";
echo " ((         ((,      ((  ██║██║╚██╗██║██╔══╝  ██║     ██╔══╝  ██╔══██║██╔══██╗██║╚██╗██║";
echo "  ((    (((((((((    ((  ██║██║ ╚████║██║     ███████╗███████╗██║  ██║██║  ██║██║ ╚████║";
echo "   (((           ((( ((  ╚═╝╚═╝  ╚═══╝╚═╝     ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝";
echo "      (((((((((((((((((                                                                 ";
echo "                                                                                        ";
echo "Git deploy 자동화 스크립트";
echo ""

# Script to deploy to test branch

usage() {
    err_msg "사용법: git-deploy [--dev|--rc]"
    exit 1
}

exit_on_failed() { 
    echo "$@";
    exit 1; 
}

err_msg() { echo "$@" ;} >&2

# long 옵션 처리
A=""
is_dev=0
deploy_branch="test"
while true; do
    [ $# -eq 0 ] && break
    case $1 in
        --dev)
            is_dev=1
            shift; continue
            ;;
        --rc)
            deploy_branch="rc"
            shift; continue
            ;;
        --*) 
            err_msg "알 수 없는 옵션: $1"
            usage;
            ;;
    esac

    A=$A$([ -n "$A" ] && echo -e "\a")$1
    shift
done

# Delete 'test' branch with -f option

echo "🗑 $deploy_branch 브랜치를 삭제합니다."
echo "git branch -D $deploy_branch"
git branch -D $deploy_branch

echo ""

# Checkout current branch or 'dev' if --dev option has been given

git_current_branch=$(git branch --show-current)
if [ $is_dev -eq 1 ]
    then
        echo "🦏 dev 브랜치로 전환합니다."
        echo "git checkout dev"
        git checkout dev || exit_on_failed "오류가 발생했습니다."
    else
        echo "🏇🏾 $git_current_branch 브랜치로 전환합니다."
        echo "git checkout $git_current_branch"
        git checkout "$git_current_branch" || exit_on_failed "오류가 발생했습니다."
fi

echo ""

# Create new branch 'test' and checkout to this

echo "🆕 $deploy_branch 브랜치를 생성합니다."
echo "git checkout -b $deploy_branch"
git checkout -b $deploy_branch || exit_on_failed "오류가 발생했습니다."

echo ""

# Push local branch onto the remote branch with -f option

echo "🆙 로컬 $deploy_branch 브랜치를 리모트로 강제 푸시합니다."
echo "git push -f origin $deploy_branch"
git push -f origin $deploy_branch || exit_on_failed "오류가 발생했습니다."

echo ""

# Checkout back to initial branch 

echo "🆗 시작 브랜치로 돌아옵니다."
echo "git checkout $git_current_branch"
git checkout "$git_current_branch" || exit_on_failed "오류가 발생했습니다."

echo ""

# Delete 'test' branch

echo "🆓 $deploy_branch 브랜치를 삭제합니다."
echo "git branch -D $deploy_branch"
git branch -D "$deploy_branch" || exit_on_failed "오류가 발생했습니다."

echo ""

# Bye!

echo "👽 안녕!"
